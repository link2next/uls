/**
 * This file automatically has been generated by ULS and
 *  contains an implementation of lexical analyzer
 *  for parsing the programming language 'sample2'.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
#pragma once

#include <uls/UlsLex.h>
#include <string>

class Sample2 : public uls::crux::UlsLex {
  public:
	static const int             NONE = -7;
	static const int             LINK = -6;
	static const int             TMPL = -5;
	static const int          LINENUM = -4;
	static const int           NUMBER = -3;
	static const int              EOF = -1;

	static const int              EOI = 0;
	static const int              TAB = 9;

	static const int               LF = 10;

	static const int            BEGIN = 92;
	static const int              BEG = 92;
	static const int              AND = 93;
	static const int           ANDAND = 93;
	static const int           AANNDD = 93;
	static const int             AND2 = 93;
	static const int        AND_ALIAS = 93;
	static const int            MINUS = 94;
	static const int               OR = 94;
	static const int              OR2 = 94;
	static const int               EQ = 95;
	static const int             EQEQ = 96;
	static const int              NEQ = 97;
	static const int              LEQ = 98;
	static const int              GEQ = 99;

	static const int               IF = 150;
	static const int            ENDIF = 151;
	static const int      BITWISE_AND = 152;
	static const int              ERR = 199;

	static const int           SQUOTE = 200;
	static const int           DQUOTE = 201;

	static const int            IDENT = 210;

	Sample2(std::tstring &ulc_fpath)
		 : uls::crux::UlsLex(ulc_fpath) {}
};
