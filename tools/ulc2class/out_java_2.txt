/**
 * This file automatically has been generated by ULS and
 *  contains an implementation of lexical analyzer
 *  for parsing the programming language 'sample2'.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
public class Sample2 extends uls.polaris.UlsLex {
	public final int             NONE = -7;
	public final int             LINK = -6;
	public final int             TMPL = -5;
	public final int          LINENUM = -4;
	public final int           NUMBER = -3;
	public final int              EOF = -1;

	public final int              EOI = 0;
	public final int              TAB = 9;

	public final int               LF = 10;

	public final int            BEGIN = 92;
	public final int              BEG = 92;
	public final int              AND = 93;
	public final int           ANDAND = 93;
	public final int           AANNDD = 93;
	public final int             AND2 = 93;
	public final int        AND_ALIAS = 93;
	public final int            MINUS = 94;
	public final int               OR = 94;
	public final int              OR2 = 94;
	public final int               EQ = 95;
	public final int             EQEQ = 96;
	public final int              NEQ = 97;
	public final int              LEQ = 98;
	public final int              GEQ = 99;

	public final int               IF = 150;
	public final int            ENDIF = 151;
	public final int      BITWISE_AND = 152;
	public final int              ERR = 199;

	public final int           SQUOTE = 200;
	public final int           DQUOTE = 201;

	public final int            IDENT = 210;

	public Sample2(String ulc_file) {
		super(ulc_file);
	}

	protected void finalize() {
		super.finalize();
	}
}
