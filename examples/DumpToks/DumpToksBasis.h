/**
 * This file automatically has been generated by ULS and
 *  contains an implementation of lexical analyzer
 *  for parsing the programming language 'dumptoks'.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
#pragma once

#include <uls/UlsLex.h>
#include <string>

namespace uls {
	namespace collection {
		class DumpToksBasis : public uls::crux::UlsLex {
		  public:
			static const int              ERR = -8;
			static const int             NONE = -7;
			static const int             LINK = -6;
			static const int             TMPL = -5;
			static const int              LNO = -4;
			static const int           NUMBER = -3;
			static const int               ID = -2;
			static const int        EndOfFile = -1;

			static const int              EOI = 0;

			static const int              AND = 128;
			static const int               OR = 129;

			static const int              EQL = 130;
			static const int              LEQ = 131;
			static const int              GEQ = 132;
			static const int              NEQ = 133;
			static const int             INCR = 134;
			static const int             DECR = 135;

			static const int              ASM = 150;
			static const int          DEFAULT = 151;
			static const int             AUTO = 152;
			static const int               DO = 153;
			static const int           DOUBLE = 154;

			static const int             ELSE = 160;
			static const int             ENUM = 161;
			static const int             GOTO = 165;
			static const int               IF = 166;
			static const int            BREAK = 167;
			static const int             CASE = 168;
			static const int           SWITCH = 169;

			static const int          TYPEDEF = 170;
			static const int            UNION = 171;
			static const int             CHAR = 172;
			static const int           EXTERN = 173;
			static const int            FLOAT = 174;
			static const int              FOR = 175;
			static const int         CONTINUE = 176;
			static const int        TOK_CONST = 177;
			static const int              INT = 178;
			static const int             LONG = 179;

			static const int         REGISTER = 180;
			static const int           RETURN = 185;
			static const int            SHORT = 186;
			static const int           SIGNED = 187;
			static const int           SIZEOF = 188;
			static const int           STATIC = 189;

			static const int           STRUCT = 190;
			static const int         UNSIGNED = 191;
			static const int         TOK_VOID = 192;
			static const int         VOLATILE = 193;
			static const int            WHILE = 194;

			DumpToksBasis(std::string &ulc_fpath)
				 : uls::crux::UlsLex(ulc_fpath) {}
		};
	}
}
