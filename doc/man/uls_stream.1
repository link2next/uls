.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.13.
.TH ULS_STREAM(V2.6.0) "1" "June 2022" "uls_stream(v2.6.0) (link2next@gmail.com)," "User Commands"
.SH NAME
uls_stream(v2.6.0), written by Stanley Hong \- uls_stream
.SH SYNOPSIS
.B uls_stream
[\fI\,options\/\fR] [\fI\,name1=value1 \/\fR...] \fI\,<file|dir>\/\fR
.SH DESCRIPTION
.IP
uls_stream generates token sequence file from (plain text) input files.
.IP
uls_stream <uls\-file|(*.uls)>
uls_stream \fB\-L\fR <ulc\-file> [\-b] [\-o <output\-file>] <text\-file|(*.uls)>
uls_stream [\-L <ulc\-file>] \fB\-C\fR <listing\-of\-files> <target\-dir>
uls_stream [\-L <ulc\-file>] \fB\-C\fR <listing\-of\-files> \fB\-f\fR 'filter\-path' <target\-dir>
.TP
\fB\-L\fR, \fB\-\-lang=\fR<ulc\-spec>
Specify lexical\-configuration(*.ulc) for your own language.
.TP
\fB\-o\fR, \fB\-\-output=\fR<filepath>
specify the output filepath.
.TP
\fB\-b\fR, \fB\-\-binary\fR
The output file will be binary file.
.HP
\fB\-C\fR, \fB\-\-conglomerate=\fR<listfile> This outputs a conglomerate file from the multiple input\-files.
.TP
\fB\-f\fR, \fB\-\-filter=\fR<cmdline>
Specify the filter for the input files with the \fB\-C\-option\fR.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
verbose mode.
.TP
\fB\-V\fR, \fB\-\-version\fR
Print the version information.
.TP
\fB\-h\fR, \fB\-\-help\fR
Display a short help.
.PP
The 'uls_stream' reads source code files or lexical stream files(*.uls) as input files.
It displays or converts and save it again into uls\-format\-file.
It's necessary to specify a lexical configuration from ulc\-file(*.ulc) with \fB\-L\-option\fR.
The created lexical analyzer from the ulc\-file will read the input\-files.
The output file is an uls\-file, which contains a token sequence file.
Below is illustrated a token sequence with its lexeme.
.TP
[
ID]  DDD
.TP
[
<=]  <=
.TP
[
ID]  EEE
.TP
[
{]  {
.TP
[
ID]  YYY
.TP
[
=]
.PP
You can use the uls\-file as an input file to 'uls_stream.
.PP
If you specify \fB\-C\-option\fR with list of files, you can get a conglomerate all the input files into one file.
The list file is just a simple list of file paths that you want to process.
The each line in the file represents the filepath which starts from <target\-dir>.
Let a listing\-file 'a.list' be as follows.
.IP
# Comment here
# A filepath per line
input1.c
src/input2.c
srclib/input3.c
.PP
You can use \fB\-C\-option\fR as below.
.IP
uls_stream \fB\-C\fR a.list \fI\,/package/home/target\-dir\/\fP
.PP
The output file is specified with \fB\-o\-option\fR. The default output\-file in binary mode('\-b') is the 'a.uls'.
The \fB\-f\-option\fR can be used with \fB\-C\-option\fR to filter the files before the input to be passed to lexical analyzer.
The argument of \fB\-f\-option\fR should be a command line which inputs from stdin and outputs to stdout like 'gcc \fB\-E\fR'.
.PP
To read ULS\-file,
.IP
uls_stream \fB\-L\fR sample.ulc input1.txt
uls_stream \fB\-L\fR sample.ulc input1.uls
uls_stream \fB\-L\fR sample.ulc \fB\-o\fR a.txt input1.uls
.PP
You can use the \fB\-t\-option\fR to specify the format of output file.
.IP
uls_stream \fB\-L\fR sample.ulc \fB\-t\fR bin\-be input1.uls
.IP
This generates the binary file of big\-endian type.
.IP
uls_stream \fB\-L\fR sample.ulc \fB\-t\fR bin\-le input1.uls
.IP
This generates the binary file of little\-endian type.
.IP
uls_stream \fB\-L\fR sample.ulc input1.uls
.IP
This generates the binary file of host\-type.
.IP
uls_stream \fB\-L\fR sample.ulc \fB\-t\fR txt input1.uls
.IP
This save a text formatted file from 'input1.uls'.
.PP
To get the conglomerate ULS\-file,
.IP
uls_stream \fB\-b\fR \fB\-C\fR ./a.list \fI\,/package/home\/\fP
uls_stream \fB\-b\fR \fB\-C\fR ./a.list \fB\-f\fR 'gcc \fB\-E\fR' ../package/home
.PP
To make a template\-uls file from a source file tmpl_ex.cc,
.IP
uls_stream \fB\-L\fR sample.ulc \fB\-b\fR \fB\-o\fR tmpl_ex.uls \fB\-TT1\fR tmpl_ex.cc
This make the identifier 'T1' in 'tmpl_ex.cc' a template variable.
.PP
To make a uls file from the 'tmpl_ex.uls' with the template variables substituted,
.IP
uls_stream \fB\-L\fR sample.ulc T1='unsigned int' tmpl_ex.uls
.IP
is provided under The MIT License (MIT).
.SH "SEE ALSO"
The full documentation for
.B uls_stream(v2.6.0)
is maintained as a Texinfo manual.  If the
.B info
and
.B uls_stream(v2.6.0)
programs are properly installed at your site, the command
.IP
.B info uls_stream(v2.6.0)
.PP
should give you access to the complete manual.
