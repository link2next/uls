.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.
.TH ULC2CLASS "1" "May 2019" "ulc2class v2.7.0, written by Stanley Hong (link2next@gmail.com)," "User Commands"
.SH NAME
ulc2class \- ulc2class
.SH SYNOPSIS
.B ulc2class
[\fI\,OPTIONS\/\fR] \fI\,<ulc-file.ulc|uld-file.uld>\/\fR
.SH DESCRIPTION
.IP
ulc2class generates the source files for lexical analysis from ulc file.
.IP
ulc2class <ulc\-filepath|lang\-name>
ulc2class \fB\-l\fR {c|cpp|cppcli|cs|java} <ulc\-file>
ulc2class \fB\-lc\fR \fB\-e\fR <enum\-name> <ulc\-file>
ulc2class \fB\-f\fR <out\-filename> \fB\-n\fR <class\-name> <ulc\-file>
ulc2class \fB\-d\fR <out\-dirpath> \fB\-f\fR <out\-filename> <ulc\-file>
ulc2class \fB\-q\fR [lang\-name]
ulc2class \fB\-q\fR \fB\-s\fR <lang\-name>
ulc2class \fB\-\-dump=\fR<category> <ulc\-filepath>,
.IP
where category = [keyw|names|rsvd|hash|ch_ctx|quote|1char|2char|utf]
.TP
\fB\-o\fR, \fB\-\-output\fR <filepath>
specify the output file path.
.TP
\fB\-f\fR, \fB\-\-filename\fR <filename>
specify the output file name without suffix.
.TP
\fB\-d\fR, \fB\-\-dirpath\fR <dirpath>
specify the directory for output files.
.TP
\fB\-l\fR, \fB\-\-lang=\fR<lang\-name>
specify the target language name.
.TP
\fB\-n\fR, \fB\-\-class\-name=\fR<name>
specify the name of the class(or enum\-name).
.TP
\fB\-q\fR, \fB\-\-query\fR [lang\-name]
query the list of ulc names.
.TP
\fB\-s\fR, \fB\-\-uld\-sample\fR
generates a sample uld\-file.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
verbose mode.
.TP
\fB\-V\fR, \fB\-\-version\fR
prints the version information.
.TP
\fB\-h\fR, \fB\-\-help\fR
displays the brief help.
.PP
The tokens generated by <null> consists of reserved and regular ones.
The regular tokens are defined by user.
The reserved tokens are the basic tokens that the system initially defines.
.SS "The below are the reserved tokens:"
.IP
* EOI(End of Input): The last token of all input streams.
.IP
It returns EOI if the internal input stack is empty!
.IP
* EOF: The internal input structure contains a stack of input streams.
.IP
It returns EOF whenever top of the stacks is consumed.
.IP
* ERR: It returns this err token in case of error.
* ID: Identifer token, which should be defined by user in ulc\-file.
* NUMBER: It represents the current token is number whichever it is integer or floating number.
* LINENUM: This informs users of the location of the input cursor.
* TMPL: This allows the template variables in uls\-file, which must be replaced with strings.
* NONE: It returns NONE when the input stack is intial state.
.PP
You can specify the qualified long class name with \fB\-n\-option\fR.
For instance, the class name may be 'AAA.BBB.SampleLex', or just class name 'SampleLex'.
.PP
To generate c++ headers,
.IP
ulc2class sample.ulc
ulc2class \fB\-lcpp\fR \fB\-n\fR AAA.BBB.SampleLex sample.ulc
.PP
The default output of ulc2class is a c++ header file.
.PP
To generate header files of other languages, use \fB\-l\-option\fR.
.IP
ulc2class \fB\-lc\fR sample.ulc
ulc2class \fB\-ljava\fR \fB\-n\fR sample sample.ulc
.PP
To generate C# wrapper class files,
.IP
ulc2class \fB\-lcs\fR \fB\-n\fR AAA.BBB.SampleLex sample.ulc
ulc2class \fB\-d\fR \fI\,/topdir/AAA/BBB\/\fP \fB\-f\fR SampleLex \fB\-lcs\fR \fB\-n\fR AAA.BBB.SampleLex sample.ulc
The above line specifies the output directory with \fB\-d\-option\fR.
The f\-option is used for the common filename of output files.
.PP
To generate java class files,
.IP
ulc2class \fB\-ljava\fR \fB\-n\fR AAA.BBB.SampleLex sample.ulc
ulc2class \fB\-d\fR \fI\,/topdir/AAA/BBB\/\fP \fB\-f\fR SampleLex \fB\-l\fR java \fB\-n\fR AAA.BBB.SampleLex sample.ulc
.PP
To query the available names for ulc in the uls repository,
.IP
ulc2class \fB\-q\fR
.IP
\&.....
cpp c++ C++
c_sharp C# c# cs csharp c\-sharp
go Go golang
visual_basic visual\-basic VisualBasic 'visual basic' 'Visual basic'
\&.....
.IP
Each line represents the supported names of a language.
You may select the any name in same group for your preference.
The name must be used as the argument of uls\-object creator,
.IP
such as uls_create(), subclasses of UlsLex(), for configuration name.
.PP
If you want to know whether or not a language is supported by ULS,
.IP
ulc2class \fB\-q\fR golang
ulc2class \fB\-q\fR c++
.PP
To dump the mapping of token name to token number, use \fB\-s\-option\fR with \fB\-q\-option\fR.
.IP
ulc2class \fB\-q\fR \fB\-s\fR golang
.IP
#@golang
.IP
\&......
NUMBER \fB\-3\fR
.IP
ID \fB\-2\fR
.IP
EOF \fB\-1\fR
EOI 0
.IP
RUNE_LITSTR 128
.IP
INTERP_LITSTR 129
.IP
RAW_LITSTR 130
.IP
\&.....
.PP
You can modify the token name and number after saving the above output as uld\-file
.IP
and specify the path of uld\-file in the argument of uls\-object creator for configuration name.
.PP
Refer to the examples in 'ulc_exam' in the package to see how to write ulc\-file.
Refer to the examples' or 'tests' to see how to use ulc\-file.
.IP
is provided under The MIT License (MIT).
.SH "SEE ALSO"
The full documentation for
.B ulc2class
is maintained as a Texinfo manual.  If the
.B info
and
.B ulc2class
programs are properly installed at your site, the command
.IP
.B info ulc2class
.PP
should give you access to the complete manual.
